version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15
    container_name: ocr-postgres
    environment:
      POSTGRES_DB: ocr_db
      POSTGRES_USER: ocr_user
      POSTGRES_PASSWORD: ocr_password
    ports:
      - "5435:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database_setup.sql:/docker-entrypoint-initdb.d/01-setup.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ocr_user -d ocr_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Microservicio OCR
  ocr-service:
    build: .
    container_name: ocr-invoice-extractor
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - PYTHONUNBUFFERED=1
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ocr_db
      - DB_USER=ocr_user
      - DB_PASSWORD=ocr_password
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Servicio opcional para desarrollo con hot-reload
  ocr-service-dev:
    build: .
    container_name: ocr-invoice-extractor-dev
    ports:
      - "5001:5000"
    environment:
      - PORT=5000
      - FLASK_ENV=development
      - PYTHONUNBUFFERED=1
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ocr_db
      - DB_USER=ocr_user
      - DB_PASSWORD=ocr_password
    volumes:
      - .:/app
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    command: ["python", "-m", "flask", "run", "--host=0.0.0.0", "--port=5000", "--reload"]
    profiles:
      - dev

volumes:
  postgres_data: 